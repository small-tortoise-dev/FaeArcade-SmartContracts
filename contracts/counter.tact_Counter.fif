// automatically generated from `@stdlib/std/stdlib.fc` `E:/Ton/FaeArcade/contracts/counter.tact_Counter.fc` 
PROGRAM{
  DECLPROC $Counter$_store
  DECLPROC $Counter$_load
  DECLPROC $Counter$init$_load
  DECLPROC $Counter$_contract_init
  DECLPROC $Counter$_contract_load
  DECLPROC $Counter$_contract_store
  DECLPROC $Counter$_fun_counter
  DECLPROC $Counter$_fun_owner
  104984 DECLMETHOD %counter
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  $Counter$_store PROCINLINE:<{
    s0 s2 XCHG
    STSLICE
    257 PUSHINT
    STIX
  }>
  $Counter$_load PROCINLINE:<{
    LDMSGADDR
    257 PUSHINT
    LDIX
    -ROT
  }>
  $Counter$init$_load PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $Counter$_contract_init PROCINLINE:<{
    0 PUSHINT
  }>
  $Counter$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Counter$_load INLINECALLDICT
      1 2 BLKDROP2
    }>ELSE<{
      $Counter$init$_load INLINECALLDICT
      SWAP
      ENDS
      $Counter$_contract_init INLINECALLDICT
    }>
  }>
  $Counter$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    -ROT
    $Counter$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Counter$_fun_counter PROCREF:<{
    DUP
  }>
  $Counter$_fun_owner PROCREF:<{
    OVER
  }>
  %counter PROC:<{
    $Counter$_contract_load INLINECALLDICT
    $Counter$_fun_counter INLINECALLDICT
    2 1 BLKDROP2
  }>
  %owner PROC:<{
    $Counter$_contract_load INLINECALLDICT
    $Counter$_fun_owner INLINECALLDICT
    2 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Counter$_contract_load INLINECALLDICT
    s0 s3 XCHG
    IFJMP:<{
      3 BLKDROP
    }>
    OVER
    SBITS
    31 GTINT
    IF:<{
      SWAP
      32 LDU
      NIP
      SWAP
    }>
    SWAP
    HASHSU
    DUP
    69416536767715606506388722885455358241464102324033398280593991534930481259132 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      SWAP
      INC
      $Counter$_contract_store INLINECALLDICT
    }>
    31859947303164195289405269471400616682423919881088233387569021131595097251238 PUSHINT
    EQUAL
    IFJMP:<{
      SWAP
      DEC
      $Counter$_contract_store INLINECALLDICT
    }>
    2DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
